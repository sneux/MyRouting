/*******************

Summer Ray 
6230850

Github link:
https://github.com/sneux/MyRouting/

*******************/

package net.floodlightcontroller.myrouting;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;

import org.openflow.protocol.OFFlowMod;
import org.openflow.protocol.OFMatch;
import org.openflow.protocol.OFMessage;
import org.openflow.protocol.OFPacketIn;
import org.openflow.protocol.OFType;
import org.openflow.protocol.action.OFAction;
import org.openflow.protocol.action.OFActionOutput;

import net.floodlightcontroller.core.FloodlightContext;
import net.floodlightcontroller.core.IOFMessageListener;
import net.floodlightcontroller.core.IOFSwitch;
import net.floodlightcontroller.core.module.FloodlightModuleContext;
import net.floodlightcontroller.core.module.FloodlightModuleException;
import net.floodlightcontroller.core.module.IFloodlightModule;
import net.floodlightcontroller.core.module.IFloodlightService;
import net.floodlightcontroller.core.IFloodlightProviderService;
import net.floodlightcontroller.devicemanager.IDevice;
import net.floodlightcontroller.devicemanager.IDeviceService;
import net.floodlightcontroller.devicemanager.SwitchPort;

import java.util.ArrayList;
import java.util.Set;

import net.floodlightcontroller.linkdiscovery.ILinkDiscoveryService;
import net.floodlightcontroller.linkdiscovery.LinkInfo;
import net.floodlightcontroller.packet.Ethernet;
import net.floodlightcontroller.packet.IPv4;
import net.floodlightcontroller.routing.Link;
import net.floodlightcontroller.routing.Route;
import net.floodlightcontroller.routing.RouteId;
import net.floodlightcontroller.staticflowentry.IStaticFlowEntryPusherService;
import net.floodlightcontroller.topology.NodePortTuple;

import org.openflow.util.HexString;
import org.openflow.util.U8;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MyRouting implements IOFMessageListener, IFloodlightModule {

	protected IFloodlightProviderService floodlightProvider;
	protected Set<Long> macAddresses;
	protected static Logger logger;
	protected IDeviceService deviceProvider;
	protected ILinkDiscoveryService linkProvider;

	protected Map<Long, IOFSwitch> switches;
	protected Map<Link, LinkInfo> links;
	protected Collection<? extends IDevice> devices;

	protected static int uniqueFlow;
	protected ILinkDiscoveryService lds;
	protected IStaticFlowEntryPusherService flowPusher;
	protected boolean printedTopo = false;

	@Override
	public String getName() {
		return MyRouting.class.getSimpleName();
	}

	@Override
	public boolean isCallbackOrderingPrereq(OFType type, String name) {
		return (type.equals(OFType.PACKET_IN)
				&& (name.equals("devicemanager") || name.equals("topology")) || name
					.equals("forwarding"));
	}

	@Override
	public boolean isCallbackOrderingPostreq(OFType type, String name) {
		return false;
	}

	@Override
	public Collection<Class<? extends IFloodlightService>> getModuleServices() {
		return null;
	}

	@Override
	public Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls() {
		return null;
	}

	@Override
	public Collection<Class<? extends IFloodlightService>> getModuleDependencies() {
		Collection<Class<? extends IFloodlightService>> l = new ArrayList<Class<? extends IFloodlightService>>();
		l.add(IFloodlightProviderService.class);
		l.add(IDeviceService.class);
		l.add(ILinkDiscoveryService.class);
		return l;
	}

	@Override
	public void init(FloodlightModuleContext context)
			throws FloodlightModuleException {
		floodlightProvider = context
				.getServiceImpl(IFloodlightProviderService.class);
		deviceProvider = context.getServiceImpl(IDeviceService.class);
		linkProvider = context.getServiceImpl(ILinkDiscoveryService.class);
		flowPusher = context
				.getServiceImpl(IStaticFlowEntryPusherService.class);
		lds = context.getServiceImpl(ILinkDiscoveryService.class);

	}

	@Override
	public void startUp(FloodlightModuleContext context) {
		floodlightProvider.addOFMessageListener(OFType.PACKET_IN, this);
	}

	private SwitchPort[] findSwitchPorts(int ip) {
		IDevice dev = this.deviceProvider.findDevice(
			match.getDataLayerSource(),
			null,
			ip,
			null,
			null
		);
		if (dev == null) {
			return null;
		}
		return dev.getAttachmentPoints();
	}

	private int linkCost(final Link link) {
		/* compute the cost of the link by switch dpids
			Link type													Cost
			Both associated switches have odd IDs, e.g., (S1, S3)		1
			Both associated switches have even IDs, e.g., (S2, S4)		100
			Otherwise, e.g., (S1, S2)									10
		 */
		final long a = link.getSrc() & 1;
		final long b = link.getDst() & 1;
		if (a == 1 && b == 1) {
			return 1;
		} else if (a == 0 && b == 0) {
			return 100;
		} else {
			return 10;
		}
	}

	private final Map<Long, Set<Link>> switchOutLinks;

	private List<NodePortTuple> findPath(final long src, final long dst) {
		/*
			from https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm

			3      create vertex set Q
			4
			5      for each vertex v in Graph:            
			6          dist[v] ← INFINITY                 
			7          prev[v] ← UNDEFINED                
			8          add v to Q                     
			9      dist[source] ← 0                       
			10     
			11      while Q is not empty:
			12          u ← vertex in Q with min dist[u]   
			13                                             
			14          remove u from Q
			15         
			16          for each neighbor v of u:           // only v that are still in Q
			17              alt ← dist[u] + length(u, v)
			18              if alt < dist[v]:              
			19                  dist[v] ← alt
			20                  prev[v] ← u
		*/

		final Map<Long, Integer> dist = new HashMap<>();
		final Map<Long, Link> linkTo = new HashMap<>();

		final PriorityQueue<Long> queue = new PriorityQueue<>(new Comparator<Long>() {

			public int compare(final Long a, final Long b) {
				/* order by least dist */
				return dist.get(a) - dist.get(b);
			}

			public boolean equals(final Long a, final Long b) {
				return a == b;
			}
		});

		final Set<Long> switches = this.switchOutLinks.keySet();

		for (final long v : switches) {
			dist.put(v, Integer.MAX_VALUE);
			linkTo.put(v, null);
			queue.add(v);
		}
		dist.put(srcSw, 0);

		while (!queue.isEmpty()) {
			final long u = queue.poll();
			for (final Link link : this.switchOutLinks.get(u)) {
				final long v = link.getDst();
				final int alt = dist.get(u) + linkCost(link);
				if (alt < dist.get(v)) {
					dist.put(v, alt);
					linkTo.put(v, link);

					/* update the queue order as dist[v] has changed */
					queue.remove(v);
					queue.add(v);
				}
			}
		}

		/*
			1  S ← empty sequence
			2  u ← target
			3  if prev[u] is defined or u = source:          // Do something only if the vertex is reachable
			4      while u is defined:                       // Construct the shortest path with a stack S
			5          insert u at the beginning of S        // Push the vertex onto the stack
			6          u ← prev[u]                           // Traverse from target to source
		*/

		final List<NodePortTuple> path = new ArrayList<>();

		Link u = linkTo.get(dst);

		if (u == null || src == dst) {
			return path;
		}

		for (; u != null; u = linkTo.get(u)) {
			path.add(0, new NodePortTuple(u.getDst(), u.getDstPort()));
			path.add(0, new NodePortTuple(u.getSrc(), u.getSrcPort()));
		}

		return path;
	}

	@Override
	public net.floodlightcontroller.core.IListener.Command receive(
			IOFSwitch sw, OFMessage msg, FloodlightContext cntx) {


		// Print the topology if not yet.
		if (!printedTopo) {
			System.out.println("*** Print topology");

			this.switchOutLinks = new HashMap<Long, Set<Link>>();

			final Set<Long> switches = this.floodlightProvider.getAllSwitchDpids();
			// For each switch, print its neighbor switches.
			for (final long sw : switches) {
				final Set<Link> links = this.linkProvider.get(sw);
				final Set<Link> outLinks = new HashSet<>();
				final Set<Long> neighbors = new HashSet<>();
				for (final Link link : links) {
					if (link.getSrc() == sw) {
						outLinks.add(link);
						neighbors.add(link.getDst());
					}
				}
				switchOutLinks.put(sw, outLinks);
				System.out.printf("switch %d neighbors: %s", sw, String.join(", ", neighbors));
			}

			printedTopo = true;
		}


		// eth is the packet sent by a switch and received by floodlight.
		Ethernet eth = IFloodlightProviderService.bcStore.get(cntx,
				IFloodlightProviderService.CONTEXT_PI_PAYLOAD);

		// We process only IP packets of type 0x0800.
		if (eth.getEtherType() != 0x0800) {
			return Command.CONTINUE;
		}
		else{
			System.out.println("*** New flow packet");

			// Parse the incoming packet.
			OFPacketIn pi = (OFPacketIn)msg;
			OFMatch match = new OFMatch();
			match.loadFromPacket(pi.getPacketData(), pi.getInPort());	
			
			// Obtain source and destination IPs.
			final int srcIp = match.getNetworkSource();
			final int dstIp = match.getNetworkDestination();
			System.out.println("srcIP: " + IPv4.fromIPv4Address(srcIp));
			System.out.println("dstIP: " + IPv4.fromIPv4Address(dstIp));

			final SwitchPort[] srcPorts = findSwitchPorts(srcIp);
			final SwitchPort[] dstPorts = findSwitchPorts(dstIp);

			final long srcSw = srcPorts[0].getSwitchDPID();
			final short srcPort = (short) srcPorts[0].getPort();
			final long dstSw = dstPorts[0].getSwitchDPID();

			// Calculate the path using Dijkstra's algorithm.
			Route route = new Route(srcSw, dstSw);

			final List<NodePortTuple> path = findPath(srcSw, dstSw);
			// prepend src input port
			path.add(0, new NodePortTuple(srcSw, srcPort));
			route.setPath(path);

			List<Long> pathSwitches = new ArrayList<>();
			for (final NodePortTuple port : dpidPath) {
				pathSwitches.add(port.getNodeId());
			}
			pathSwitches = new ArrayList<Long>(new LinkedHashSet<Long>(pathSwitches));  // dedup

			System.out.println("route: " + String.join(" ", pathSwitches));			

			// Write the path into the flow tables of the switches on the path.
			if (route != null) {
				installRoute(route.getPath(), match);
			}
			
			return Command.STOP;
		}
	}

	// Install routing rules on switches. 
	private void installRoute(List<NodePortTuple> path, OFMatch match) {

		OFMatch m = new OFMatch();

		m.setDataLayerType(Ethernet.TYPE_IPv4)
				.setNetworkSource(match.getNetworkSource())
				.setNetworkDestination(match.getNetworkDestination());

		for (int i = 0; i <= path.size() - 1; i += 2) {
			final short inport = path.get(i).getPortId();
			final short outport = path.get(i + 1).getPortId();

			final String switchId = HexString.toHexString(path.get(i).getNodeId());

			m.setInputPort(inport);
			OFFlowMod mod = (OFFlowMod) floodlightProvider
					.getOFMessageFactory().getMessage(OFType.FLOW_MOD);
			mod.setCommand(OFFlowMod.OFPFC_ADD)
					.setIdleTimeout((short) 0)
					.setHardTimeout((short) 0)
					.setMatch(m)
					.setPriority((short) 105)
					.setActions(Arrays.asList(new OFActionOutput(outport)))
					.setLength(
							(short) (OFFlowMod.MINIMUM_LENGTH + OFActionOutput.MINIMUM_LENGTH));
			flowPusher.addFlow("routeFlow" + uniqueFlow, mod, switchId);
			uniqueFlow++;

			/* now add the return routing rule */
			m.setInputPort(outport);
			mod = (OFFlowMod) floodlightProvider
					.getOFMessageFactory().getMessage(OFType.FLOW_MOD);
			mod.setCommand(OFFlowMod.OFPFC_ADD)
					.setIdleTimeout((short) 0)
					.setHardTimeout((short) 0)
					.setMatch(m)
					.setPriority((short) 105)
					.setActions(Arrays.asList(new OFActionOutput(inport)))
					.setLength(
							(short) (OFFlowMod.MINIMUM_LENGTH + OFActionOutput.MINIMUM_LENGTH));
			flowPusher.addFlow("routeFlow" + uniqueFlow, mod, switchId);
			uniqueFlow++;
		}
	}
}
